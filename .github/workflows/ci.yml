name: CI

on: [push]


jobs:

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build-type: [Release, Debug]
        include:
          - openmp: true
            os: ubuntu-latest
            build-type: Release
          - openmp: true
            os: macos-latest
            build-type: Release
    env:
      BUILD_TYPE: ${{ matrix.build-type }}
      CMAKE_FLAGS: -DSPIRIT_UI_CXX_USE_QT=OFF
      OMP_NUM_THREADS: 4

    steps:
    - uses: actions/checkout@v2

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure environment
      shell: bash
      if: matrix.openmp
      run: echo "CMAKE_FLAGS=$CMAKE_FLAGS -DSPIRIT_USE_OPENMP=ON" >> $GITHUB_ENV

    - name: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: Install python packages
      run: pip install --user numpy

    - name: test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure

  test-coverage:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_TEST_COVERAGE=ON

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config Release -j 2

    - name: Install necessary packages
      run: |
        python -m pip install --upgrade pip
        python -m pip install numpy coverage coveralls wheel twine
        sudo apt install lcov

    - name: C++ coverage
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        lcov -c -i --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o baseline.info
        make test
        lcov -c --no-external --directory . --base-directory $GITHUB_WORKSPACE/core -o after_test.info
        lcov -a baseline.info -a after_test.info -o total_test.info
        lcov -r total_test.info \*thirdparty\* \*/test/\* \*Collection\* \*DLL_\* -o coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

    - name: Python API coverage
      working-directory: ${{runner.workspace}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd $GITHUB_WORKSPACE/core/python
        coverage run --source spirit --omit=spirit/spiritlib.py setup.py test > cov.txt
        head cov.txt
        coverage report -m
        coverage xml
        coveralls

  build-cuda:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-20.04
          - os: ubuntu-18.04
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_USE_CUDA=ON -DSPIRIT_CUDA_ARCH=sm_70

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      run: sudo apt install nvidia-cuda-toolkit

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

  test-pinning-defects:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: Release
      CMAKE_FLAGS: -DSPIRIT_UI_CXX_USE_QT=OFF -DSPIRIT_ENABLE_PINNING=ON -DSPIRIT_ENABLE_DEFECTS=ON

    steps:
    - uses: actions/checkout@v2

    - name: Create build folder
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: configure
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS

    - name: build
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -j 2

    - name: Install python packages
      run: pip install --user numpy

    - name: test
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: ctest -C $BUILD_TYPE --output-on-failure